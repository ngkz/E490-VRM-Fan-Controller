
optiboot_atmega644p.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000009c  00800100  0000fe7c  00000310  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000027c  0000fc00  0000fc00  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .version      00000002  0000fffe  0000fffe  000003ac  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .comment      0000002f  00000000  00000000  000003ae  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000003dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007a8  00000000  00000000  0000040d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002c5  00000000  00000000  00000bb5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000039a  00000000  00000000  00000e7a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000009c  00000000  00000000  00001214  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000028b  00000000  00000000  000012b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000449  00000000  00000000  0000153b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  00001984  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0000fc00 <__ctors_end>:
    fc00:	11 e0       	ldi	r17, 0x01	; 1
    fc02:	a0 e0       	ldi	r26, 0x00	; 0
    fc04:	b1 e0       	ldi	r27, 0x01	; 1
    fc06:	ec e7       	ldi	r30, 0x7C	; 124
    fc08:	fe ef       	ldi	r31, 0xFE	; 254
    fc0a:	02 c0       	rjmp	.+4      	; 0xfc10 <__ctors_end+0x10>
    fc0c:	05 90       	lpm	r0, Z+
    fc0e:	0d 92       	st	X+, r0
    fc10:	ac 39       	cpi	r26, 0x9C	; 156
    fc12:	b1 07       	cpc	r27, r17
    fc14:	d9 f7       	brne	.-10     	; 0xfc0c <__ctors_end+0xc>

0000fc16 <pre_main>:
/* everything that needs to run VERY early */
void pre_main(void) {
  // Allow convenient way of calling do_spm function - jump table,
  //   so entry to this function will always be here, indepedent of compilation,
  //   features etc
  asm volatile (
    fc16:	01 c0       	rjmp	.+2      	; 0xfc1a <main>
    fc18:	0b c1       	rjmp	.+534    	; 0xfe30 <do_spm>

0000fc1a <main>:
  //  SP points to RAMEND
  //  r1 contains zero
  //
  // If not, uncomment the following instructions:
  // cli();
  asm volatile ("clr __zero_reg__");
    fc1a:	11 24       	eor	r1, r1
#if defined(__AVR_ATmega8515__) || defined(__AVR_ATmega8535__) ||	\
    defined(__AVR_ATmega16__)   || defined(__AVR_ATmega162__) ||	\
    defined (__AVR_ATmega128__)
  ch = MCUCSR;
#else
  ch = MCUSR;
    fc1c:	84 b7       	in	r24, 0x34	; 52
#endif
  // Skip all logic and run bootloader if MCUSR is cleared (application request)
  if (ch != 0) {
    fc1e:	88 23       	and	r24, r24
    fc20:	61 f0       	breq	.+24     	; 0xfc3a <main+0x20>
       *  2. we clear WDRF if it's set with EXTRF to avoid loops
       * One problematic scenario: broken application code sets watchdog timer 
       * without clearing MCUSR before and triggers it quickly. But it's
       * recoverable by power-on with pushed reset button.
       */
      if ((ch & (_BV(WDRF) | _BV(EXTRF))) != _BV(EXTRF)) { 
    fc22:	98 2f       	mov	r25, r24
    fc24:	9a 70       	andi	r25, 0x0A	; 10
    fc26:	92 30       	cpi	r25, 0x02	; 2
    fc28:	41 f0       	breq	.+16     	; 0xfc3a <main+0x20>
	  if (ch & _BV(EXTRF)) {
    fc2a:	81 ff       	sbrs	r24, 1
    fc2c:	02 c0       	rjmp	.+4      	; 0xfc32 <main+0x18>
    defined(__AVR_ATmega16__)   || defined(__AVR_ATmega162__) ||	\
    defined(__AVR_ATmega128__)
               // Fix missing definitions in avr-libc
	      MCUCSR = ~(_BV(WDRF));
#else
	      MCUSR = ~(_BV(WDRF));
    fc2e:	97 ef       	ldi	r25, 0xF7	; 247
    fc30:	94 bf       	out	0x34, r25	; 52
	  /* 
	   * save the reset flags in the designated register
	   * This can be saved in a main program by putting code in .init0 (which
	   * executes before normal c init code) to save R2 to a global variable.
	   */
	  __asm__ __volatile__ ("mov r2, %0\n" :: "r" (ch));
    fc32:	28 2e       	mov	r2, r24

	  // switch off watchdog
	  watchdogConfig(WATCHDOG_OFF);
    fc34:	80 e0       	ldi	r24, 0x00	; 0
    fc36:	e7 d0       	rcall	.+462    	; 0xfe06 <watchdogConfig>
	  // Note that appstart_vec is defined so that this works with either
	  // real or virtual boot partitions.
	   __asm__ __volatile__ (
    fc38:	e3 c1       	rjmp	.+966    	; 0x10000 <__EEPROM_REGION_LENGTH__>
      }
  }

#if LED_START_FLASHES > 0
  // Set up Timer 1 for timeout counter
  TCCR1B = _BV(CS12) | _BV(CS10); // div 1024
    fc3a:	85 e0       	ldi	r24, 0x05	; 5
    fc3c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
  LINBTR = (1 << LDISR) | (8 << LBT0); 
  LINCR = _BV(LENA) | _BV(LCMD2) | _BV(LCMD1) | _BV(LCMD0); 
  LINDAT=0;
    #else
      #ifndef SINGLESPEED
  UART_SRA = _BV(U2X0); //Double speed mode USART0
    fc40:	82 e0       	ldi	r24, 0x02	; 2
    fc42:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
      #endif
  UART_SRB = _BV(RXEN0) | _BV(TXEN0);
    fc46:	88 e1       	ldi	r24, 0x18	; 24
    fc48:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
  UART_SRC = _BV(UCSZ00) | _BV(UCSZ01);
    fc4c:	86 e0       	ldi	r24, 0x06	; 6
    fc4e:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
  UART_SRL = (uint8_t)BAUD_SETTING;
    fc52:	80 e1       	ldi	r24, 0x10	; 16
    fc54:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    #endif // LIN_UART
  #endif // mega8/etc
#endif // soft_uart

  // Set up watchdog to trigger after 1s
  watchdogConfig(WATCHDOG_1S);
    fc58:	8e e0       	ldi	r24, 0x0E	; 14
    fc5a:	d5 d0       	rcall	.+426    	; 0xfe06 <watchdogConfig>

#if (LED_START_FLASHES > 0) || defined(LED_DATA_FLASH) || defined(LED_START_ON)
  /* Set LED pin as output */
  LED_DDR |= _BV(LED);
    fc5c:	20 9a       	sbi	0x04, 0	; 4
    fc5e:	86 e0       	ldi	r24, 0x06	; 6
}

#if LED_START_FLASHES > 0
void flash_led(uint8_t count) {
  do {
    TCNT1 = -(F_CPU/(1024*16));
    fc60:	20 e3       	ldi	r18, 0x30	; 48
    fc62:	3c ef       	ldi	r19, 0xFC	; 252
    TIFR1 = _BV(TOV1);
    fc64:	91 e0       	ldi	r25, 0x01	; 1
}

#if LED_START_FLASHES > 0
void flash_led(uint8_t count) {
  do {
    TCNT1 = -(F_CPU/(1024*16));
    fc66:	30 93 85 00 	sts	0x0085, r19	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    fc6a:	20 93 84 00 	sts	0x0084, r18	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    TIFR1 = _BV(TOV1);
    fc6e:	96 bb       	out	0x16, r25	; 22
    while(!(TIFR1 & _BV(TOV1)));
    fc70:	b0 9b       	sbis	0x16, 0	; 22
    fc72:	fe cf       	rjmp	.-4      	; 0xfc70 <main+0x56>
    defined(__AVR_ATmega8535__) || defined(__AVR_ATmega16__)   ||	\
    defined(__AVR_ATmega162__)  || defined(__AVR_ATmega32__)   ||	\
    defined(__AVR_ATmega64__)   || defined(__AVR_ATmega128__)
    LED_PORT ^= _BV(LED);
#else
    LED_PIN |= _BV(LED);
    fc74:	18 9a       	sbi	0x03, 0	; 3
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
    fc76:	a8 95       	wdr
     *  by the UART hardware, avrdude sends several attempts in rather
     *  quick succession, some of which will be lost and cause us to
     *  get out of sync.  So if we see any data; stop blinking.
     */
#ifndef LIN_UART
    if (UART_SRA & _BV(RXC0))
    fc78:	40 91 c0 00 	lds	r20, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    fc7c:	47 fd       	sbrc	r20, 7
    fc7e:	02 c0       	rjmp	.+4      	; 0xfc84 <main+0x6a>
    fc80:	81 50       	subi	r24, 0x01	; 1
#else
// This doesn't seem to work?
//    if ((UART_PIN & (1<<UART_RX_BIT)) == 0)
//	break;  // detect start bit on soft uart too.
#endif
  } while (--count);
    fc82:	89 f7       	brne	.-30     	; 0xfc66 <main+0x4c>

	    /*
	     * Copy data from the buffer into the flash write buffer.
	     */
	    do {
		__boot_page_fill_short((uint16_t)(void*)addrPtr, *(mybuff.wptr++));
    fc84:	ff 24       	eor	r15, r15
    fc86:	f3 94       	inc	r15
	    } while (len -= 2);

	    /*
	     * Actually Write the buffer to flash (and wait for it to finish.)
	     */
	    __boot_page_write_short(address.word);
    fc88:	55 e0       	ldi	r21, 0x05	; 5
    fc8a:	e5 2e       	mov	r14, r21
	    boot_spm_busy_wait();
#if defined(RWWSRE)
	    // Reenable read access to flash
	    __boot_rww_enable_short();
    fc8c:	61 e1       	ldi	r22, 0x11	; 17
#endif

  /* Forever loop: exits by causing WDT reset */
  for (;;) {
    /* get character from UART */
    ch = getch();
    fc8e:	d6 2e       	mov	r13, r22

    if(ch == STK_GET_PARAMETER) {
    fc90:	ae d0       	rcall	.+348    	; 0xfdee <getch>
      unsigned char which = getch();
    fc92:	81 34       	cpi	r24, 0x41	; 65
    fc94:	61 f4       	brne	.+24     	; 0xfcae <main+0x94>
    fc96:	ab d0       	rcall	.+342    	; 0xfdee <getch>
      verifySpace();
    fc98:	c8 2f       	mov	r28, r24
    fc9a:	bb d0       	rcall	.+374    	; 0xfe12 <verifySpace>
      /*
       * Send optiboot version as "SW version"
       * Note that the references to memory are optimized away.
       */
      if (which == STK_SW_MINOR) {
    fc9c:	c2 38       	cpi	r28, 0x82	; 130
    fc9e:	e9 f0       	breq	.+58     	; 0xfcda <main+0xc0>
	  putch(optiboot_version & 0xFF);
      } else if (which == STK_SW_MAJOR) {
    fca0:	c1 38       	cpi	r28, 0x81	; 129
	  putch(optiboot_version >> 8);
    fca2:	11 f4       	brne	.+4      	; 0xfca8 <main+0x8e>
    fca4:	88 e0       	ldi	r24, 0x08	; 8
      } else {
	/*
	 * GET PARAMETER returns a generic 0x03 reply for
         * other parameters - enough to keep Avrdude happy
	 */
	putch(0x03);
    fca6:	01 c0       	rjmp	.+2      	; 0xfcaa <main+0x90>
    fca8:	83 e0       	ldi	r24, 0x03	; 3
    fcaa:	9a d0       	rcall	.+308    	; 0xfde0 <putch>
    fcac:	96 c0       	rjmp	.+300    	; 0xfdda <main+0x1c0>
      }
    }
    else if(ch == STK_SET_DEVICE) {
    fcae:	82 34       	cpi	r24, 0x42	; 66
      // SET DEVICE is ignored
      getNch(20);
    fcb0:	11 f4       	brne	.+4      	; 0xfcb6 <main+0x9c>
    fcb2:	84 e1       	ldi	r24, 0x14	; 20
    }
    else if(ch == STK_SET_DEVICE_EXT) {
    fcb4:	03 c0       	rjmp	.+6      	; 0xfcbc <main+0xa2>
      // SET DEVICE EXT is ignored
      getNch(5);
    fcb6:	85 34       	cpi	r24, 0x45	; 69
    fcb8:	19 f4       	brne	.+6      	; 0xfcc0 <main+0xa6>
    fcba:	85 e0       	ldi	r24, 0x05	; 5
    }
    else if(ch == STK_LOAD_ADDRESS) {
    fcbc:	b2 d0       	rcall	.+356    	; 0xfe22 <getNch>
    fcbe:	8d c0       	rjmp	.+282    	; 0xfdda <main+0x1c0>
      // LOAD ADDRESS
      address.bytes[0] = getch();
    fcc0:	85 35       	cpi	r24, 0x55	; 85
    fcc2:	39 f4       	brne	.+14     	; 0xfcd2 <main+0xb8>
    fcc4:	94 d0       	rcall	.+296    	; 0xfdee <getch>
      address.bytes[1] = getch();
    fcc6:	08 2f       	mov	r16, r24
    fcc8:	92 d0       	rcall	.+292    	; 0xfdee <getch>
      }
      else {
        RAMPZ &= 0xFE;
      }
#endif
      address.word *= 2; // Convert from word address to byte address
    fcca:	18 2f       	mov	r17, r24
    fccc:	00 0f       	add	r16, r16
    fcce:	11 1f       	adc	r17, r17
      verifySpace();
    }
    else if(ch == STK_UNIVERSAL) {
    fcd0:	83 c0       	rjmp	.+262    	; 0xfdd8 <main+0x1be>
        getNch(3);
        putch(0x00);
      }
#else
      // UNIVERSAL command is ignored
      getNch(4);
    fcd2:	86 35       	cpi	r24, 0x56	; 86
    fcd4:	21 f4       	brne	.+8      	; 0xfcde <main+0xc4>
    fcd6:	84 e0       	ldi	r24, 0x04	; 4
      putch(0x00);
    fcd8:	a4 d0       	rcall	.+328    	; 0xfe22 <getNch>
#endif
    }
    /* Write memory, length is big endian and is in bytes */
    else if(ch == STK_PROG_PAGE) {
    fcda:	80 e0       	ldi	r24, 0x00	; 0
    fcdc:	e6 cf       	rjmp	.-52     	; 0xfcaa <main+0x90>
      // PROGRAM PAGE - we support flash programming only, not EEPROM
      uint8_t desttype;
      uint8_t *bufPtr;
      pagelen_t savelength;

      GETLENGTH(length);
    fcde:	84 36       	cpi	r24, 0x64	; 100
    fce0:	09 f0       	breq	.+2      	; 0xfce4 <main+0xca>
    fce2:	48 c0       	rjmp	.+144    	; 0xfd74 <main+0x15a>
    fce4:	84 d0       	rcall	.+264    	; 0xfdee <getch>
    fce6:	c8 2f       	mov	r28, r24
    fce8:	d0 e0       	ldi	r29, 0x00	; 0
    fcea:	dc 2f       	mov	r29, r28
    fcec:	cc 27       	eor	r28, r28
      savelength = length;
      desttype = getch();
    fcee:	7f d0       	rcall	.+254    	; 0xfdee <getch>
    fcf0:	c8 2b       	or	r28, r24
      // PROGRAM PAGE - we support flash programming only, not EEPROM
      uint8_t desttype;
      uint8_t *bufPtr;
      pagelen_t savelength;

      GETLENGTH(length);
    fcf2:	7d d0       	rcall	.+250    	; 0xfdee <getch>
      savelength = length;
      desttype = getch();
    fcf4:	c8 2e       	mov	r12, r24
    fcf6:	5e 01       	movw	r10, r28
    fcf8:	81 2c       	mov	r8, r1

      // read a page worth of contents
      bufPtr = buff.bptr;
      do *bufPtr++ = getch();
    fcfa:	99 24       	eor	r9, r9
    fcfc:	93 94       	inc	r9
    fcfe:	77 d0       	rcall	.+238    	; 0xfdee <getch>
    fd00:	f4 01       	movw	r30, r8
    fd02:	81 93       	st	Z+, r24
      while (--length);
    fd04:	4f 01       	movw	r8, r30
    fd06:	f1 e0       	ldi	r31, 0x01	; 1
    fd08:	af 1a       	sub	r10, r31
    fd0a:	b1 08       	sbc	r11, r1

      // Read command terminator, start reply
      verifySpace();
    fd0c:	c1 f7       	brne	.-16     	; 0xfcfe <main+0xe4>
    fd0e:	81 d0       	rcall	.+258    	; 0xfe12 <verifySpace>
 * void writebuffer(memtype, buffer, address, length)
 */
static inline void writebuffer(int8_t memtype, addr16_t mybuff,
			       addr16_t address, pagelen_t len)
{
    switch (memtype) {
    fd10:	85 e4       	ldi	r24, 0x45	; 69
    fd12:	c8 12       	cpse	r12, r24
    fd14:	12 c0       	rjmp	.+36     	; 0xfd3a <main+0x120>
    fd16:	d3 95       	inc	r29
    fd18:	48 01       	movw	r8, r16
    fd1a:	a1 2c       	mov	r10, r1
    fd1c:	bb 24       	eor	r11, r11
    case 'E': // EEPROM
#if defined(SUPPORT_EEPROM) || defined(BIGBOOT)
        while(len--) {
    fd1e:	b3 94       	inc	r11
    fd20:	ac 16       	cp	r10, r28
    fd22:	bd 06       	cpc	r11, r29
    fd24:	09 f4       	brne	.+2      	; 0xfd28 <main+0x10e>
	    eeprom_write_byte((address.bptr++), *(mybuff.bptr++));
    fd26:	59 c0       	rjmp	.+178    	; 0xfdda <main+0x1c0>
    fd28:	f5 01       	movw	r30, r10
    fd2a:	61 91       	ld	r22, Z+
    fd2c:	5f 01       	movw	r10, r30
    fd2e:	c4 01       	movw	r24, r8
    fd30:	97 d0       	rcall	.+302    	; 0xfe60 <eeprom_write_byte>
    fd32:	ff ef       	ldi	r31, 0xFF	; 255
    fd34:	8f 1a       	sub	r8, r31
    fd36:	9f 0a       	sbc	r9, r31
    fd38:	f3 cf       	rjmp	.-26     	; 0xfd20 <main+0x106>
	     * and we needed the space back.
	     */
#ifdef FOURPAGEERASE
	    if ((address.bytes[0] & ((SPM_PAGESIZE<<2)-1))==0) {
#endif
	    __boot_page_erase_short(address.word);
    fd3a:	83 e0       	ldi	r24, 0x03	; 3
    fd3c:	f8 01       	movw	r30, r16
    fd3e:	87 bf       	out	0x37, r24	; 55
    fd40:	e8 95       	spm
	    boot_spm_busy_wait();
    fd42:	07 b6       	in	r0, 0x37	; 55
    fd44:	00 fc       	sbrc	r0, 0
    fd46:	fd cf       	rjmp	.-6      	; 0xfd42 <main+0x128>
    fd48:	a0 e0       	ldi	r26, 0x00	; 0
    fd4a:	b1 e0       	ldi	r27, 0x01	; 1
    fd4c:	f8 01       	movw	r30, r16

	    /*
	     * Copy data from the buffer into the flash write buffer.
	     */
	    do {
		__boot_page_fill_short((uint16_t)(void*)addrPtr, *(mybuff.wptr++));
    fd4e:	8d 91       	ld	r24, X+
    fd50:	9d 91       	ld	r25, X+
    fd52:	0c 01       	movw	r0, r24
    fd54:	f7 be       	out	0x37, r15	; 55
    fd56:	e8 95       	spm
		addrPtr += 2;
	    } while (len -= 2);
    fd58:	11 24       	eor	r1, r1
    fd5a:	22 97       	sbiw	r28, 0x02	; 2
    fd5c:	32 96       	adiw	r30, 0x02	; 2
    fd5e:	20 97       	sbiw	r28, 0x00	; 0

	    /*
	     * Actually Write the buffer to flash (and wait for it to finish.)
	     */
	    __boot_page_write_short(address.word);
    fd60:	b1 f7       	brne	.-20     	; 0xfd4e <main+0x134>
    fd62:	f8 01       	movw	r30, r16
	    boot_spm_busy_wait();
    fd64:	e7 be       	out	0x37, r14	; 55
    fd66:	e8 95       	spm
#if defined(RWWSRE)
	    // Reenable read access to flash
	    __boot_rww_enable_short();
    fd68:	07 b6       	in	r0, 0x37	; 55
    fd6a:	00 fc       	sbrc	r0, 0
    fd6c:	fd cf       	rjmp	.-6      	; 0xfd68 <main+0x14e>
      writebuffer(desttype, buff, address, savelength);


    }
    /* Read memory block mode, length is big endian.  */
    else if(ch == STK_READ_PAGE) {
    fd6e:	d7 be       	out	0x37, r13	; 55
    fd70:	e8 95       	spm
      uint8_t desttype;
      GETLENGTH(length);
    fd72:	33 c0       	rjmp	.+102    	; 0xfdda <main+0x1c0>
    fd74:	84 37       	cpi	r24, 0x74	; 116
    fd76:	19 f5       	brne	.+70     	; 0xfdbe <main+0x1a4>
    fd78:	3a d0       	rcall	.+116    	; 0xfdee <getch>
    fd7a:	c8 2f       	mov	r28, r24
    fd7c:	d0 e0       	ldi	r29, 0x00	; 0
    fd7e:	dc 2f       	mov	r29, r28
    fd80:	cc 27       	eor	r28, r28

      desttype = getch();
    fd82:	35 d0       	rcall	.+106    	; 0xfdee <getch>
    fd84:	5e 01       	movw	r10, r28
    fd86:	a8 2a       	or	r10, r24

      verifySpace();
    fd88:	32 d0       	rcall	.+100    	; 0xfdee <getch>
    fd8a:	98 2e       	mov	r9, r24

static inline void read_mem(uint8_t memtype, addr16_t address, pagelen_t length)
{
    uint8_t ch;

    switch (memtype) {
    fd8c:	42 d0       	rcall	.+132    	; 0xfe12 <verifySpace>
    fd8e:	e8 01       	movw	r28, r16
    fd90:	f5 e4       	ldi	r31, 0x45	; 69

#if defined(SUPPORT_EEPROM) || defined(BIGBOOT)
    case 'E': // EEPROM
	do {
	    putch(eeprom_read_byte((address.bptr++)));
    fd92:	9f 12       	cpse	r9, r31
    fd94:	0b c0       	rjmp	.+22     	; 0xfdac <main+0x192>
    fd96:	ce 01       	movw	r24, r28
    fd98:	5b d0       	rcall	.+182    	; 0xfe50 <eeprom_read_byte>
	} while (--length);
    fd9a:	22 d0       	rcall	.+68     	; 0xfde0 <putch>
    fd9c:	81 e0       	ldi	r24, 0x01	; 1
    fd9e:	a8 1a       	sub	r10, r24
    fda0:	b1 08       	sbc	r11, r1
    fda2:	21 96       	adiw	r28, 0x01	; 1
    fda4:	a1 14       	cp	r10, r1
    fda6:	b1 04       	cpc	r11, r1
	    //      while (--length);
	    // read a Flash and increment the address (may increment RAMPZ)
	    __asm__ ("elpm %0,Z+\n" : "=r" (ch), "=z" (address.bptr): "1" (address));
#else
	    // read a Flash byte and increment the address
	    __asm__ ("lpm %0,Z+\n" : "=r" (ch), "=z" (address.bptr): "1" (address));
    fda8:	b1 f7       	brne	.-20     	; 0xfd96 <main+0x17c>
    fdaa:	17 c0       	rjmp	.+46     	; 0xfdda <main+0x1c0>
#endif
	    putch(ch);
    fdac:	fe 01       	movw	r30, r28
    fdae:	85 91       	lpm	r24, Z+
	} while (--length);
    fdb0:	ef 01       	movw	r28, r30
    fdb2:	16 d0       	rcall	.+44     	; 0xfde0 <putch>
    fdb4:	e1 e0       	ldi	r30, 0x01	; 1
    fdb6:	ae 1a       	sub	r10, r30
    fdb8:	b1 08       	sbc	r11, r1

      read_mem(desttype, address, length);
    }

    /* Get device signature bytes  */
    else if(ch == STK_READ_SIGN) {
    fdba:	c1 f7       	brne	.-16     	; 0xfdac <main+0x192>
    fdbc:	0e c0       	rjmp	.+28     	; 0xfdda <main+0x1c0>
      // READ SIGN - return what Avrdude wants to hear
      verifySpace();
    fdbe:	85 37       	cpi	r24, 0x75	; 117
    fdc0:	39 f4       	brne	.+14     	; 0xfdd0 <main+0x1b6>
      putch(SIGNATURE_0);
    fdc2:	27 d0       	rcall	.+78     	; 0xfe12 <verifySpace>
    fdc4:	8e e1       	ldi	r24, 0x1E	; 30
    fdc6:	0c d0       	rcall	.+24     	; 0xfde0 <putch>
      putch(SIGNATURE_1);
    fdc8:	86 e9       	ldi	r24, 0x96	; 150
    fdca:	0a d0       	rcall	.+20     	; 0xfde0 <putch>
    fdcc:	8a e0       	ldi	r24, 0x0A	; 10
      putch(SIGNATURE_2);
    fdce:	6d cf       	rjmp	.-294    	; 0xfcaa <main+0x90>
    fdd0:	81 35       	cpi	r24, 0x51	; 81
    }
    else if (ch == STK_LEAVE_PROGMODE) { /* 'Q' */
    fdd2:	11 f4       	brne	.+4      	; 0xfdd8 <main+0x1be>
    fdd4:	88 e0       	ldi	r24, 0x08	; 8
      // Adaboot no-wait mod
      watchdogConfig(WATCHDOG_16MS);
    fdd6:	17 d0       	rcall	.+46     	; 0xfe06 <watchdogConfig>
    fdd8:	1c d0       	rcall	.+56     	; 0xfe12 <verifySpace>
    fdda:	80 e1       	ldi	r24, 0x10	; 16
      verifySpace();
    }
    else {
      // This covers the response to commands like STK_ENTER_PROGMODE
      verifySpace();
    fddc:	01 d0       	rcall	.+2      	; 0xfde0 <putch>
    fdde:	58 cf       	rjmp	.-336    	; 0xfc90 <main+0x76>

0000fde0 <putch>:
    }
    putch(STK_OK);
    fde0:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    fde4:	95 ff       	sbrs	r25, 5
  }
    fde6:	fc cf       	rjmp	.-8      	; 0xfde0 <putch>
    while (!(UART_SRA & _BV(UDRE0))) {  /* Spin */ }
  #else
    while (!(LINSIR & _BV(LTXOK)))   {  /* Spin */ }
  #endif

  UART_UDR = ch;
    fde8:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    fdec:	08 95       	ret

0000fdee <getch>:
    :
      "r25"
);
#else
#ifndef LIN_UART
  while(!(UART_SRA & _BV(RXC0)))  {  /* Spin */ }
    fdee:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    fdf2:	87 ff       	sbrs	r24, 7
    fdf4:	fc cf       	rjmp	.-8      	; 0xfdee <getch>
  if (!(UART_SRA & _BV(FE0))) {
    fdf6:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    fdfa:	84 fd       	sbrc	r24, 4
    fdfc:	01 c0       	rjmp	.+2      	; 0xfe00 <getch+0x12>
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
    fdfe:	a8 95       	wdr
       * don't care that an invalid char is returned...)
       */
    watchdogReset();
  }

  ch = UART_UDR;
    fe00:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
  LED_PIN |= _BV(LED);
#endif
#endif

  return ch;
}
    fe04:	08 95       	ret

0000fe06 <watchdogConfig>:
}

void watchdogConfig(uint8_t x) {
#ifdef WDCE //does it have a Watchdog Change Enable?
 #ifdef WDTCSR
  WDTCSR = _BV(WDCE) | _BV(WDE);
    fe06:	e0 e6       	ldi	r30, 0x60	; 96
    fe08:	f0 e0       	ldi	r31, 0x00	; 0
    fe0a:	98 e1       	ldi	r25, 0x18	; 24
    fe0c:	90 83       	st	Z, r25
#else //then it must be one of those newfangled ones that use CCP
  CCP=0xD8; //so write this magic number to CCP
#endif 

#ifdef WDTCSR
  WDTCSR = x;
    fe0e:	80 83       	st	Z, r24
    fe10:	08 95       	ret

0000fe12 <verifySpace>:
  do getch(); while (--count);
  verifySpace();
}

void verifySpace() {
  if (getch() != CRC_EOP) {
    fe12:	ed df       	rcall	.-38     	; 0xfdee <getch>
    fe14:	80 32       	cpi	r24, 0x20	; 32
    fe16:	19 f0       	breq	.+6      	; 0xfe1e <verifySpace+0xc>
    watchdogConfig(WATCHDOG_16MS);    // shorten WD timeout
    fe18:	88 e0       	ldi	r24, 0x08	; 8
    fe1a:	f5 df       	rcall	.-22     	; 0xfe06 <watchdogConfig>
    fe1c:	ff cf       	rjmp	.-2      	; 0xfe1c <verifySpace+0xa>
    while (1)			      // and busy-loop so that WD causes
      ;				      //  a reset and app start.
  }
  putch(STK_INSYNC);
    fe1e:	84 e1       	ldi	r24, 0x14	; 20
    fe20:	df cf       	rjmp	.-66     	; 0xfde0 <putch>

0000fe22 <getNch>:
    ::[count] "M" (UART_B_VALUE)
  );
}
#endif

void getNch(uint8_t count) {
    fe22:	cf 93       	push	r28
    fe24:	c8 2f       	mov	r28, r24
  do getch(); while (--count);
    fe26:	e3 df       	rcall	.-58     	; 0xfdee <getch>
    fe28:	c1 50       	subi	r28, 0x01	; 1
    fe2a:	e9 f7       	brne	.-6      	; 0xfe26 <getNch+0x4>
  verifySpace();
}
    fe2c:	cf 91       	pop	r28
}
#endif

void getNch(uint8_t count) {
  do getch(); while (--count);
  verifySpace();
    fe2e:	f1 cf       	rjmp	.-30     	; 0xfe12 <verifySpace>

0000fe30 <do_spm>:
    fe30:	fc 01       	movw	r30, r24
 *   data=0 in WRITE
 */
static void do_spm(uint16_t address, uint8_t command, uint16_t data)  __attribute__ ((used));
static void do_spm(uint16_t address, uint8_t command, uint16_t data) {
    // Do spm stuff
    asm volatile (
    fe32:	0a 01       	movw	r0, r20
    fe34:	67 bf       	out	0x37, r22	; 55
    fe36:	e8 95       	spm
    fe38:	11 24       	eor	r1, r1
    fe3a:	07 b6       	in	r0, 0x37	; 55
    );

    // wait for spm to complete
    //   it doesn't have much sense for __BOOT_PAGE_FILL,
    //   but it doesn't hurt and saves some bytes on 'if'
    boot_spm_busy_wait();
    fe3c:	00 fc       	sbrc	r0, 0
    fe3e:	fd cf       	rjmp	.-6      	; 0xfe3a <do_spm+0xa>
    fe40:	66 70       	andi	r22, 0x06	; 6
#if defined(RWWSRE)
    // this 'if' condition should be: (command == __BOOT_PAGE_WRITE || command == __BOOT_PAGE_ERASE)...
    // but it's tweaked a little assuming that in every command we are interested in here, there
    // must be also SELFPRGEN set. If we skip checking this bit, we save here 4B
    if ((command & (_BV(PGWRT)|_BV(PGERS))) && (data == 0) ) {
    fe42:	29 f0       	breq	.+10     	; 0xfe4e <do_spm+0x1e>
    fe44:	45 2b       	or	r20, r21
    fe46:	19 f4       	brne	.+6      	; 0xfe4e <do_spm+0x1e>
    fe48:	81 e1       	ldi	r24, 0x11	; 17
      // Reenable read access to flash
      __boot_rww_enable_short();
    fe4a:	87 bf       	out	0x37, r24	; 55
    fe4c:	e8 95       	spm
    fe4e:	08 95       	ret

0000fe50 <eeprom_read_byte>:
    fe50:	f9 99       	sbic	0x1f, 1	; 31
    fe52:	fe cf       	rjmp	.-4      	; 0xfe50 <eeprom_read_byte>
    fe54:	92 bd       	out	0x22, r25	; 34
    fe56:	81 bd       	out	0x21, r24	; 33
    fe58:	f8 9a       	sbi	0x1f, 0	; 31
    fe5a:	99 27       	eor	r25, r25
    fe5c:	80 b5       	in	r24, 0x20	; 32
    fe5e:	08 95       	ret

0000fe60 <eeprom_write_byte>:
    fe60:	26 2f       	mov	r18, r22

0000fe62 <eeprom_write_r18>:
    fe62:	f9 99       	sbic	0x1f, 1	; 31
    fe64:	fe cf       	rjmp	.-4      	; 0xfe62 <eeprom_write_r18>
    fe66:	1f ba       	out	0x1f, r1	; 31
    fe68:	92 bd       	out	0x22, r25	; 34
    fe6a:	81 bd       	out	0x21, r24	; 33
    fe6c:	20 bd       	out	0x20, r18	; 32
    fe6e:	0f b6       	in	r0, 0x3f	; 63
    fe70:	f8 94       	cli
    fe72:	fa 9a       	sbi	0x1f, 2	; 31
    fe74:	f9 9a       	sbi	0x1f, 1	; 31
    fe76:	0f be       	out	0x3f, r0	; 63
    fe78:	01 96       	adiw	r24, 0x01	; 1
    fe7a:	08 95       	ret
